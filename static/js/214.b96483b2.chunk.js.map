{"version":3,"file":"static/js/214.b96483b2.chunk.js","mappings":"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","sources":["components/PhonebookContact/inititialState.js","webpack://react-homework-template/./src/components/PhonebookContact/contact-form.module.css?f162","components/PhonebookContact/ContactForm.jsx","redux/filter/filter-selectors.js","webpack://react-homework-template/./src/components/FilterPhonebook/filter-phonebook.module.css?f313","components/FilterPhonebook/FilterPhonebook.jsx","webpack://react-homework-template/./src/components/Contacts/contact-list.module.css?6d9b","components/Contacts/ContactList.jsx","components/phonebook.module.css","components/Phonebook.jsx","pages/HomePage/HomePage.jsx","redux/contacts/contacts-selectors.js"],"sourcesContent":["const inititialState = {\n  name: '',\n  number: '',\n  importantContact: false,\n};\n\nexport default inititialState;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"contact-form_wrapper__s1ex-\",\"label\":\"contact-form_label__5BXR4\",\"input\":\"contact-form_input__ddo+t\",\"btn\":\"contact-form_btn__A8oGL\",\"checkbox\":\"contact-form_checkbox__8PTJO\"};","import { useState } from 'react';\n\nimport { addContact } from 'redux/contacts/contacts-slice';\nimport { getAllContacts } from 'redux/contacts/contacts-selectors';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport inititialState from './inititialState';\nimport css from './contact-form.module.css';\n\nconst ContactForm = () => {\n  const [state, setState] = useState({ ...inititialState });\n  const allContacts = useSelector(getAllContacts);\n\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target }) => {\n    const { name, value, type, checked } = target;\n    const newValue = type === 'checkbox' ? checked : value;\n    setState(prevState => {\n      return { ...prevState, [name]: newValue };\n    });\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    handleAddContact({ ...state });\n    setState({ ...inititialState });\n  };\n\n  const isDublicate = name => {\n    const normalizedName = name.toLowerCase();\n    const result = allContacts.find(({ name }) => {\n      return name.toLowerCase() === normalizedName;\n    });\n\n    return Boolean(result);\n  };\n\n  const handleAddContact = ({ name, number, importantContact }) => {\n    if (isDublicate(name)) {\n      alert(`${name} is already in contacts.`);\n      return false;\n    }\n    const action = addContact({ name, number, importantContact });\n    dispatch(action);\n  };\n\n  const { name, number, importantContact } = state;\n\n  return (\n    <form className={css.wrapper} onSubmit={handleSubmit}>\n      <label className={css.label}>Name</label>\n      <input\n        className={css.input}\n        value={name}\n        type=\"text\"\n        name=\"name\"\n        onChange={handleChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n\n      <label className={css.label}>Number</label>\n      <input\n        className={css.input}\n        value={number}\n        type=\"tel\"\n        name=\"number\"\n        onChange={handleChange}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n\n      <label className={css.label}>Important Contact</label>\n      <input\n        className={css.checkbox}\n        name=\"importantContact\"\n        checked={importantContact}\n        type=\"checkbox\"\n        onChange={handleChange}\n      />\n\n      <button className={css.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","export const getFilter = ({ filter }) => filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapperFilter\":\"filter-phonebook_wrapperFilter__ciemP\",\"inputFilter\":\"filter-phonebook_inputFilter__Ep+md\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filter-slice';\nimport { getFilter } from 'redux/filter/filter-selectors';\n\nimport css from './filter-phonebook.module.css';\n\nconst FilterPhonebook = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n\n  return (\n    <form className={css.wrapperFilter}>\n      <label className={css.labelFilter}>Find contacts by name</label>\n      <input\n        value={filter}\n        className={css.inputFilter}\n        type=\"text\"\n        name=\"filter\"\n        onChange={changeFilter}\n      />\n    </form>\n  );\n};\n\nexport default FilterPhonebook;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"contact-list_contactsList__Ab1Ox\",\"contactsText\":\"contact-list_contactsText__Try7T\",\"contactsBtn\":\"contact-list_contactsBtn__BU7fk\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contacts-slice';\nimport {\n  getAllContacts,\n  getFilteredContacts,\n} from 'redux/contacts/contacts-selectors';\n\nimport css from './contact-list.module.css';\n\nconst ContactList = () => {\n  const filterContacts = useSelector(getFilteredContacts);\n  const allContacts = useSelector(getAllContacts);\n\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => {\n    const action = deleteContact(id);\n    dispatch(action);\n  };\n\n  const elements = filterContacts.map(\n    ({ id, name, number, importantContact }) => (\n      <li style={{ fontWeight: importantContact ? 'bold' : 'normal' }} key={id}>\n        <span className={css.contactsText}>\n          {name}: {number}\n        </span>\n        <button className={css.contactsBtn} onClick={() => onDeleteContact(id)}>\n          Delete\n        </button>\n      </li>\n    )\n  );\n  const isContacts = Boolean(allContacts.length);\n\n  return (\n    <>\n      <div>\n        <ul className={css.contactsList}>{elements}</ul>\n      </div>\n      {!isContacts && <p>No contacts</p>}\n    </>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {};","import ContactForm from 'components/PhonebookContact/ContactForm';\nimport FilterPhonebook from 'components/FilterPhonebook/FilterPhonebook';\nimport ContactList from 'components/Contacts/ContactList';\n\nimport css from './phonebook.module.css';\n\nconst Phonebook = () => {\n  return (\n    <main className={css.conteinerPhonebook}>\n      <ContactForm />\n      <h2 className={css.text}>Contacts</h2>\n      <FilterPhonebook />\n      <ContactList />\n    </main>\n  );\n};\n\nexport default Phonebook;\n","import Phonebook from 'components/Phonebook';\n\nconst HomePage = () => {\n  return <Phonebook />;\n};\n\nexport default HomePage;\n","export const getAllContacts = store => store.contacts;\n\nexport const getImportantContacts = ({ contacts }) => {\n  const onlyImportantContacts = contacts.filter(\n    ({ importantContact }) => importantContact\n  );\n  return onlyImportantContacts;\n};\n\nexport const getFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts;\n  }\n  const normalizedContact = filter.toLowerCase();\n  const result = contacts.filter(({ name, number }) => {\n    return (\n      name.toLowerCase().includes(normalizedContact) ||\n      number.toLowerCase().includes(normalizedContact)\n    );\n  });\n  return result;\n};\n"],"names":["name","number","importantContact","useState","inititialState","state","setState","allContacts","useSelector","getAllContacts","dispatch","useDispatch","handleChange","target","value","type","checked","newValue","prevState","handleAddContact","normalizedName","toLowerCase","result","find","Boolean","isDublicate","alert","action","addContact","className","css","onSubmit","evt","preventDefault","onChange","pattern","title","required","getFilter","filter","setFilter","filterContacts","getFilteredContacts","elements","map","id","style","fontWeight","onClick","deleteContact","onDeleteContact","isContacts","length","store","contacts","getImportantContacts","normalizedContact","includes"],"sourceRoot":""}